/*
 * Copyright 2020 Oleksandr Bezushko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.insiderser.android.template.core.data.db

import androidx.annotation.WorkerThread
import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy.REPLACE
import androidx.room.Query
import kotlinx.coroutines.flow.Flow

/**
 * A sample DAO (data access object) for managing instances of [MyEntity]
 * in the [database][AppDatabase].
 *
 * @see AppDatabase.myDao
 */
@Dao
interface MyDao {

    /**
     * Get all entries from the database.
     * @return All entities, or an empty list if the table is empty
     */
    @Query("SELECT * FROM myentity")
    fun findAll(): Flow<List<MyEntity>>

    /**
     * Get a single entry whose [id][MyEntity.id] matches parameter [id].
     * @return Found [MyEntity], or `null` if nothing found.
     */
    @Query("SELECT * FROM myentity WHERE id == :id")
    fun findOneById(id: Int): Flow<MyEntity>

    /**
     * Insert a single [MyEntity] into the database.
     *
     * **Note**: [MyEntity.id] can be autogenerated by room. Set the `id` to 0 to let room
     * generate the id.
     *
     * @return The `id` of the inserted [MyEntity], or -1 if not inserted.
     */
    @Insert(onConflict = REPLACE)
    @WorkerThread
    suspend fun insertOne(entity: MyEntity): Long

    /**
     * Delete a single entry whose [id][MyEntity.id] matches the parameter [id].
     * @return How many entries were deleted: `0` or `1`.
     */
    @Query("DELETE FROM myentity WHERE id == :id")
    suspend fun deleteOneById(id: Int): Int

    /**
     * Delete **all** entries in the table. **Be careful here!**
     * @return How many entries were deleted.
     */
    @Query("DELETE FROM myentity")
    suspend fun deleteAll(): Int
}
